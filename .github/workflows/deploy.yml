name: Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Tag for the Docker image to deploy'
        required: true

env:
  AWS_REGION: "us-east-2"
  IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}  # This ensures a fallback
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECS_CLUSTER_NAME: "user-management-app-cluster"
  ECS_SERVICE_NAME: "user-management-service"
  ECS_TASK_DEFINITION: "user-management-service"  # The name of your ECS Task Definition
  ECR_REPO_WEBAPP: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/webapp"
  ECR_REPO_REDIS: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/redis"
  ECR_REPO_NGINX: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/nginx"
  ECR_REPO_MYSQL: "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/db"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update ECS task definition with new images
      run: |
        TASK_DEF_JSON=$(cat task_definition.json)

        echo "$TASK_DEF_JSON" | jq \
          --arg webapp_image "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/webapp:$IMAGE_TAG" \
          --arg redis_image "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/redis:$IMAGE_TAG" \
          --arg nginx_image "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/nginx:$IMAGE_TAG" \
          --arg db_image "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/db:$IMAGE_TAG" \
          '
          .containerDefinitions[0].image = $webapp_image |
          .containerDefinitions[1].image = $redis_image |
          .containerDefinitions[2].image = $nginx_image |
          .containerDefinitions[3].image = $db_image
          ' > task_definition.json

        cat task_definition.json


    - name: Register new ECS task definition
      run: |
        cat task_definition.json
        aws ecs register-task-definition --cli-input-json file://task_definition.json

    - name: Update ECS service with new task definition
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task_definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)

        echo "Using new task definition ARN: $NEW_TASK_DEF_ARN"

        aws ecs update-service \
          --cluster $ECS_CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --task-definition $NEW_TASK_DEF_ARN


    - name: Output deployment information
      run: |
        echo "Deployment completed to ECS with task definition: $NEW_TASK_DEF_ARN"
